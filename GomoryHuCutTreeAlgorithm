// C++ program for implementation of Ford Fulkerson algorithm
#include <iostream>
#include <limits.h>
#include <string.h>
#include <queue>
#include <stdio.h>
using namespace std;
 
// Number of vertices in given graph
//#define n 6
 
int n ;
int x[3000];
int sink[3000];

/* Returns true if there is a path from source 's' to sink 't' in
  residual graph. Also fills parent[] to store the path */
bool bfs(int s, int t, int parent[],int** rGraph)
{
    // Create a visited array and mark all vertices as not visited
    bool visited[n];
    memset(visited, 0, sizeof(visited));
 
    // Create a queue, enqueue source vertex and mark source vertex
    // as visited
    queue <int> q;
    q.push(s);
    visited[s] = true;
    parent[s] = -1;
 
    // Standard BFS Loop
    while (!q.empty())
    {
        int u = q.front();
        q.pop();
 
        for (int v=0; v<n; v++)
        {
            if (visited[v]==false && rGraph[u][v] > 0)
            {
                q.push(v);
                parent[v] = u;
                visited[v] = true;
            }
        }
    }
 
    // If we reached sink in BFS starting from source, then return
    // true, else false
    return (visited[t] == true);
}
 
// A DFS based function to find all reachable vertices from s.  The function
// marks visited[i] as true if i is reachable from s.  The initial values in
// visited[] must be false. We can also use BFS to find reachable vertices
void dfs(int s, bool visited[], int** rGraph)
{
    visited[s] = true;
    for (int i = 0; i < n; i++)
       if (rGraph[s][i] && !visited[i])
           dfs(i, visited,rGraph);
}

// Returns tne maximum flow from s to t in the given graph
int fordFulkerson( int s, int t, int** graph)
{
    int u, v;
 
    // Create a residual graph and fill the residual graph with
    // given capacities in the original graph as residual capacities
    // in residual graph
    int** rGraph; // Residual graph where rGraph[i][j] indicates 
                     // residual capacity of edge from i to j (if there
                     // is an edge. If rGraph[i][j] is 0, then there is not) 
    
    rGraph = new int *[n];
    
    
    for (int i=0 ; i < n ; i++){
        
        rGraph[i] = new int[n];
        
        for (int j=0; j< n; j ++){
            
            rGraph[i][j] = 0;
        }
    }
        
    for (u = 0; u < n; u++)
        for (v = 0; v < n; v++)
             rGraph[u][v] = graph[u][v];
 
    int parent[n];  // This array is filled by BFS and to store path
 
    int max_flow = 0;  // There is no flow initially
 
    // Augment the flow while tere is path from source to sink
    while (bfs(s, t, parent,rGraph))
    {
        // Find minimum residual capacity of the edhes along the
        // path filled by BFS. Or we can say find the maximum flow
        // through the path found.
        int path_flow = INT_MAX;
        for (v=t; v!=s; v=parent[v])
        {
            u = parent[v];
            path_flow = min(path_flow, rGraph[u][v]);
        }
 
        // update residual capacities of the edges and reverse edges
        // along the path
        for (v=t; v != s; v=parent[v])
        {
            u = parent[v];
            rGraph[u][v] -= path_flow;
            rGraph[v][u] += path_flow;
        }
 
        // Add path flow to overall flow
        max_flow += path_flow;
    }
 
    // Flow is maximum now, find vertices reachable from s
    bool visited[n];
    memset(visited, false, sizeof(visited));
    memset(x, -1, sizeof(x));
    memset(sink, -1, sizeof(sink));
    dfs(s, visited, rGraph);
 
    // Print all edges that are from a reachable vertex to
    // non-reachable vertex in the original graph
    for (int i = 0; i < n; i++){
      for (int j = 0; j < n; j++){
         if (visited[i] && !visited[j] && graph[i][j]){
             // cout << i << " - " << j << endl;
               x[i] = 0;
              sink[j] = 0;
              if(i != 0){
                  
                  for(int y=0 ; y< i ; y++){
                      for (int z=y+1; z<=j; z++ ){
                         if(rGraph[y][z] && sink[z] != 0){
                             x[y] = 0;
                         }
                          
                          
                      }     
                      
                  }
                  
              }
         }
      }
    }  
    
//    for(int i=0; i< n; i++){
//        printf("%d ", x[i]);
//    }
    
    printf("\n");

    // Return the overall flow
    return max_flow;
}


// Driver program to test above functions
int main(){
    
    int m,s,t,cost, maxFlow;
    int** graph; 
    int *p, *f1;
    
    
    //printf("Enter no of vertices: ");
    scanf("%d", &n);
    //printf("Enter no of edges: ");
    scanf("%d", &m);
     
    graph = new int *[n];
    p = new int [n];
    f1 = new int [n];
    
    for (int i=0 ; i < n ; i++){
        
        graph[i] = new int[n];
        p[i] = 0;
        f1[i] = 0;
        for (int j=0; j< n; j ++){
            
            graph[i][j] = 0;
        }
    }
   
    
    for(int i =0; i < m ; i++){
        
        scanf("%d", &s);
        scanf("%d", &t);
        scanf("%d", &cost);
        
        graph[s][t] = cost;
        graph[t][s] = cost;
    }
    
 
   // cout << "The maximum possible flow is " << fordFulkerson(0, n,graph);
    printf("Final Answer:\n");
   
    
    for(s=1; s< n; s++){
     
        t= p[s];
        
        maxFlow = fordFulkerson(s, t, graph);
        
        f1[s] = maxFlow;
        
        
        for(int i=1; i<n ;i++){
            
            if(i!=s and p[i] == t and x[i] == 0){
                p[i] = s;
            }
        }
        
        if(x[p[t]] == 0){
            
            p[s] = p[t];
            p[t] = s;
            f1[s] = f1[t];
            f1[t] = maxFlow;
        }
        
        printf("s:%d , t:%d, maxFlow:%d\n", s,t,maxFlow);
    }    
    return 0;
}
